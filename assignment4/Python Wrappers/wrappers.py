###############################################################################
# DO NOT EDIT THIS FILE! (Any changes will be overwritten.)
#
# Read the documentation here to see how to call each function and what kind of
# output to expect.
#
###############################################################################

import ctypes
import numpy
import os

from ctypes import c_void_p, c_int, c_long, c_size_t, c_double
from mpi4py import MPI

# try to import the library
try:
    path_to_library = os.path.join('lib','libhomework4.so')
    homework4library = ctypes.cdll.LoadLibrary(path_to_library)
except OSError:
    raise OSError("You need to compile your homework library using 'make'.")

# determine the c-type of an MPI_Comm type
if MPI._sizeof(MPI.Comm) == ctypes.sizeof(c_int):
    c_mpi_comm = ctypes.c_int
else:
    c_mpi_comm = ctypes.c_void_p

###############################################################################
# function wrappers
###############################################################################
def heat_serial(u, dx, Nx, dt, num_steps):
    r"""Solve the heat equation using basic finite difference scheme.

    Parameters
    ----------
    u : array
        Function values.

    Returns
    -------
    v : array
        The updated function values after heat.
    """
    if (len(u) != Nx):
        raise ValueError("Nx should equal the number of grid points.")

    # note that the code below inherently returns a copy of the original input
    u = numpy.ascontiguousarray(numpy.array(u, dtype=numpy.double)).astype(numpy.double)

    # set function types and evaluate
    try:
        f = homework4library.heat_serial
        f.restype = None
        f.argtypes = [c_void_p, c_double, c_size_t, c_double, c_size_t]
        f(u.ctypes.data, dx, Nx, dt, num_steps)
    except AttributeError:
        raise AttributeError("Something wrong happened when calling the C "
                             "library function.")
    return u

def heat_parallel(uk, dx, Nx, dt, num_steps, comm):
    r"""Solve the heat equation in paralllel. This Python function is executed by
    each spawned process.

    Parameters
    ----------
    uk : array
        Function values for process k.

    Returns
    -------
    uk : array
        The updated function values after heat_parallel()
    """
    if (len(uk) != Nx):
        raise ValueError("Nx should equal the number of grid points.")

    # note that the code below inherently returns a copy of the original input
    uk = numpy.ascontiguousarray(
        numpy.array(uk, dtype=numpy.double)).astype(numpy.double)

    # mpi comm setup
    comm_ptr = MPI._addressof(comm)
    comm_val = c_mpi_comm.from_address(comm_ptr)

    # set function types and evaluate
    try:
        f = homework4library.heat_parallel
        f.restype = None
        f.argtypes = [c_void_p, c_double, c_size_t, c_double,
                      c_size_t, c_mpi_comm]
        f(uk.ctypes.data, dx, Nx, dt, num_steps, comm_val)
    except AttributeError:
        raise AttributeError("Something wrong happened when calling the C "
                             "library function.")
    return uk

